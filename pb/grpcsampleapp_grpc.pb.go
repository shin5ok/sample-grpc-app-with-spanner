// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpcsampleapp.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUserItems(ctx context.Context, in *User, opts ...grpc.CallOption) (Game_GetUserItemsClient, error)
	AddItemUser(ctx context.Context, in *UserItem, opts ...grpc.CallOption) (*empty.Empty, error)
	PingPong(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ListItems(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Items, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/grpcsampleapp.Game/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetUserItems(ctx context.Context, in *User, opts ...grpc.CallOption) (Game_GetUserItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], "/grpcsampleapp.Game/GetUserItems", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameGetUserItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_GetUserItemsClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type gameGetUserItemsClient struct {
	grpc.ClientStream
}

func (x *gameGetUserItemsClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) AddItemUser(ctx context.Context, in *UserItem, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcsampleapp.Game/AddItemUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) PingPong(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/grpcsampleapp.Game/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) ListItems(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/grpcsampleapp.Game/ListItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations should embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	CreateUser(context.Context, *User) (*User, error)
	GetUserItems(*User, Game_GetUserItemsServer) error
	AddItemUser(context.Context, *UserItem) (*empty.Empty, error)
	PingPong(context.Context, *empty.Empty) (*empty.Empty, error)
	ListItems(context.Context, *empty.Empty) (*Items, error)
}

// UnimplementedGameServer should be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGameServer) GetUserItems(*User, Game_GetUserItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserItems not implemented")
}
func (UnimplementedGameServer) AddItemUser(context.Context, *UserItem) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemUser not implemented")
}
func (UnimplementedGameServer) PingPong(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedGameServer) ListItems(context.Context, *empty.Empty) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsampleapp.Game/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetUserItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).GetUserItems(m, &gameGetUserItemsServer{stream})
}

type Game_GetUserItemsServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type gameGetUserItemsServer struct {
	grpc.ServerStream
}

func (x *gameGetUserItemsServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_AddItemUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).AddItemUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsampleapp.Game/AddItemUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).AddItemUser(ctx, req.(*UserItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsampleapp.Game/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).PingPong(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsampleapp.Game/ListItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).ListItems(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsampleapp.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Game_CreateUser_Handler,
		},
		{
			MethodName: "AddItemUser",
			Handler:    _Game_AddItemUser_Handler,
		},
		{
			MethodName: "PingPong",
			Handler:    _Game_PingPong_Handler,
		},
		{
			MethodName: "ListItems",
			Handler:    _Game_ListItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserItems",
			Handler:       _Game_GetUserItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcsampleapp.proto",
}
